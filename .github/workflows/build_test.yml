 
  
# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: BuildTest

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


# The only variables you need to change are these!
env:
  # This should be only variable you need to change
  TEST_PROJECT: "TestProject1"
  
  # These should not need to be changed, if following std
  TEST_FOLDER: "tests"
  WIKI_MOVER_ROOT: "/github/workspace"
  COVERAGE_FOLDER: "CoverageReport"

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
    - uses: actions/checkout@v3


    - name: Dump github context
      run:   echo "$GITHUB_CONTEXT"
      shell: bash
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}


    - name: Set Variables
      run: |
        # Test Folder
        echo "TEST_PATH=$GITHUB_WORKSPACE/$TEST_FOLDER" >> $GITHUB_ENV
        source $GITHUB_ENV

        # Test Project Folder
        echo "TEST_PROJECT_PATH=$TEST_PATH/$TEST_PROJECT" >> $GITHUB_ENV
        
        # Test Code Coverage Report
        echo "TEST_COVERAGE_REPORT=$TEST_PATH/$TEST_PROJECT/$COVERAGE_FOLDER" >> $GITHUB_ENV

        #source $GITHUB_ENV
        echo "REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
        echo "WIKI_MOVER_ROOT = $WIKI_MOVER_ROOT"
        source $GITHUB_ENV

        # WIKI Mover Coverage Report Src Location.  Same as Test Code Coverage Report - but different starting point as running in a docker container.
        echo "WIKI_COVERAGE_PATH=$WIKI_MOVER_ROOT/$REPO_NAME/$REPO_NAME/$TEST_FOLDER/$TEST_PROJECT/$COVERAGE_FOLDER/" >> $GITHUB_ENV
        
        echo "/github/workspace/src/Test_StreamProcessorLibrary/report/"


    - name: Display Variables
      run: |
        echo "Github_env:            $GITHUB_ENV"
        echo "GitHome Workspace:     $GITHUB_WORKSPACE"
        echo "Test_Path:             $TEST_PATH"
        echo "Test_Project_Path:     $TEST_PROJECT_PATH"
        echo "Test_Coverage_Report:  $TEST_COVERAGE_REPORT"
        echo "Wiki Mover Root:       $WIKI_MOVER_ROOT"
        echo "WIKI Coverage Path     $WIKI_COVERAGE_PATH"


    # Install .Net
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x



    # Restore Dependencies
    - name: Restore dependencies
      run: dotnet restore


    # Build Program
    - name: Build
      run: dotnet build --no-restore --configuration Release

      
    # Run unit tests and generate coverage data
    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release /property:CollectCoverage=True /property:CoverletOutputFormat=opencover
     

    # Generate Coverage Report
    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.17       
      with: 
        reports: '${{ env.TEST_PROJECT_PATH }}/coverage.opencover.xml'
        targetdir: '${{ env.TEST_COVERAGE_REPORT }}'
        reporttypes: 'Html;MarkdownSummary'
        sourcedirs: ''
        historydir: ''
        plugins: ''
        assemblyfilters: '-nunit*;-Dapper;'
        classfilters: '+*'
        filefilters: '-Program.cs;-*.cshtml'
        verbosity: 'Verbose'

#        title: ${{ env.CODE_COVERAGE_REPORT_NAME }}
        tag: '${{ github.workflow}}_${{ github.run_id }}'
        customSettings: ''
        toolpath: 'reportgeneratortool'


    # Upload Coverage Info to an Artifact
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.2    
      with:
        name: Coverage Report
        path: ${{ env.TEST_COVERAGE_REPORT }}



    #  Copy Code Coverage Data to Wiki
    - name: External repo/wiki sync action
      uses: kai-tub/external-repo-sync-action@v1
      env: 
        GH_ACCESS_TOKEN: ${{ secrets.WIKI_ACCESS_TOKEN }}
        RPT_PATH: "${{ env.WIKI_COVERAGE_PATH }}"
      with:  
        source-directory: '${{ env.RPT_PATH }}'
        include-patterns: "*.md *.html *.png *.jpg"



    # Start a Shell into the Ubuntu box.  Press end key to start
    - name: Setup tmate session
      if: success() || failure()
      uses: mxschmitt/action-tmate@v3



